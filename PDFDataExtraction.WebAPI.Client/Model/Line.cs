/* 
 * PDF Data Extraction
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = PDFDataExtraction.WebAPI.Client.Client.SwaggerDateConverter;

namespace PDFDataExtraction.WebAPI.Client.Model
{
    /// <summary>
    /// Line
    /// </summary>
    [DataContract]
        public partial class Line :  IEquatable<Line>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Line" /> class.
        /// </summary>
        /// <param name="words">words.</param>
        /// <param name="lineNumberInPage">lineNumberInPage (required).</param>
        /// <param name="lineNumberInDocument">lineNumberInDocument (required).</param>
        /// <param name="page">page.</param>
        public Line(List<Word> words = default(List<Word>), int? lineNumberInPage = default(int?), int? lineNumberInDocument = default(int?), Page page = default(Page))
        {
            // to ensure "lineNumberInPage" is required (not null)
            if (lineNumberInPage == null)
            {
                throw new InvalidDataException("lineNumberInPage is a required property for Line and cannot be null");
            }
            else
            {
                this.LineNumberInPage = lineNumberInPage;
            }
            // to ensure "lineNumberInDocument" is required (not null)
            if (lineNumberInDocument == null)
            {
                throw new InvalidDataException("lineNumberInDocument is a required property for Line and cannot be null");
            }
            else
            {
                this.LineNumberInDocument = lineNumberInDocument;
            }
            this.Words = words;
            this.Page = page;
        }
        
        /// <summary>
        /// Gets or Sets Words
        /// </summary>
        [DataMember(Name="words", EmitDefaultValue=false)]
        public List<Word> Words { get; set; }

        /// <summary>
        /// Gets or Sets LineNumberInPage
        /// </summary>
        [DataMember(Name="lineNumberInPage", EmitDefaultValue=false)]
        public int? LineNumberInPage { get; set; }

        /// <summary>
        /// Gets or Sets LineNumberInDocument
        /// </summary>
        [DataMember(Name="lineNumberInDocument", EmitDefaultValue=false)]
        public int? LineNumberInDocument { get; set; }

        /// <summary>
        /// Gets or Sets Page
        /// </summary>
        [DataMember(Name="page", EmitDefaultValue=false)]
        public Page Page { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Line {\n");
            sb.Append("  Words: ").Append(Words).Append("\n");
            sb.Append("  LineNumberInPage: ").Append(LineNumberInPage).Append("\n");
            sb.Append("  LineNumberInDocument: ").Append(LineNumberInDocument).Append("\n");
            sb.Append("  Page: ").Append(Page).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Line);
        }

        /// <summary>
        /// Returns true if Line instances are equal
        /// </summary>
        /// <param name="input">Instance of Line to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Line input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Words == input.Words ||
                    this.Words != null &&
                    input.Words != null &&
                    this.Words.SequenceEqual(input.Words)
                ) && 
                (
                    this.LineNumberInPage == input.LineNumberInPage ||
                    (this.LineNumberInPage != null &&
                    this.LineNumberInPage.Equals(input.LineNumberInPage))
                ) && 
                (
                    this.LineNumberInDocument == input.LineNumberInDocument ||
                    (this.LineNumberInDocument != null &&
                    this.LineNumberInDocument.Equals(input.LineNumberInDocument))
                ) && 
                (
                    this.Page == input.Page ||
                    (this.Page != null &&
                    this.Page.Equals(input.Page))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Words != null)
                    hashCode = hashCode * 59 + this.Words.GetHashCode();
                if (this.LineNumberInPage != null)
                    hashCode = hashCode * 59 + this.LineNumberInPage.GetHashCode();
                if (this.LineNumberInDocument != null)
                    hashCode = hashCode * 59 + this.LineNumberInDocument.GetHashCode();
                if (this.Page != null)
                    hashCode = hashCode * 59 + this.Page.GetHashCode();
                return hashCode;
            }
        }
    }
}
