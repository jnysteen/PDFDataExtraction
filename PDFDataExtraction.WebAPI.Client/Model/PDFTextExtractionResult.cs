/* 
 * PDF Data Extraction
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = PDFDataExtraction.WebAPI.Client.Client.SwaggerDateConverter;

namespace PDFDataExtraction.WebAPI.Client.Model
{
    /// <summary>
    /// PDFTextExtractionResult
    /// </summary>
    [DataContract]
        public partial class PDFTextExtractionResult :  IEquatable<PDFTextExtractionResult>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PDFTextExtractionResult" /> class.
        /// </summary>
        /// <param name="extractedData">extractedData.</param>
        /// <param name="pagesAsPNGs">The PDF file converted into PNGs, one PNG per page.</param>
        /// <param name="fileMetaData">fileMetaData.</param>
        /// <param name="pdfEmbeddedMetadata">pdfEmbeddedMetadata.</param>
        /// <param name="errorMessage">If the extraction failed, this error message will describe what went wrong.</param>
        public PDFTextExtractionResult(Document extractedData = default(Document), List<PageAsImage> pagesAsPNGs = default(List<PageAsImage>), PDFFileMetadata fileMetaData = default(PDFFileMetadata), PDFEmbeddedMetadata pdfEmbeddedMetadata = default(PDFEmbeddedMetadata), string errorMessage = default(string))
        {
            this.ExtractedData = extractedData;
            this.PagesAsPNGs = pagesAsPNGs;
            this.FileMetaData = fileMetaData;
            this.PdfEmbeddedMetadata = pdfEmbeddedMetadata;
            this.ErrorMessage = errorMessage;
        }
        
        /// <summary>
        /// Gets or Sets ExtractedData
        /// </summary>
        [DataMember(Name="extractedData", EmitDefaultValue=false)]
        public Document ExtractedData { get; set; }

        /// <summary>
        /// The PDF file converted into PNGs, one PNG per page
        /// </summary>
        /// <value>The PDF file converted into PNGs, one PNG per page</value>
        [DataMember(Name="pagesAsPNGs", EmitDefaultValue=false)]
        public List<PageAsImage> PagesAsPNGs { get; set; }

        /// <summary>
        /// Gets or Sets FileMetaData
        /// </summary>
        [DataMember(Name="fileMetaData", EmitDefaultValue=false)]
        public PDFFileMetadata FileMetaData { get; set; }

        /// <summary>
        /// Gets or Sets PdfEmbeddedMetadata
        /// </summary>
        [DataMember(Name="pdfEmbeddedMetadata", EmitDefaultValue=false)]
        public PDFEmbeddedMetadata PdfEmbeddedMetadata { get; set; }

        /// <summary>
        /// &#x60;true&#x60;, if the extraction was successful - &#x60;false&#x60; if it failed
        /// </summary>
        /// <value>&#x60;true&#x60;, if the extraction was successful - &#x60;false&#x60; if it failed</value>
        [DataMember(Name="isSuccessful", EmitDefaultValue=false)]
        public bool? IsSuccessful { get; private set; }

        /// <summary>
        /// If the extraction failed, this error message will describe what went wrong
        /// </summary>
        /// <value>If the extraction failed, this error message will describe what went wrong</value>
        [DataMember(Name="errorMessage", EmitDefaultValue=false)]
        public string ErrorMessage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PDFTextExtractionResult {\n");
            sb.Append("  ExtractedData: ").Append(ExtractedData).Append("\n");
            sb.Append("  PagesAsPNGs: ").Append(PagesAsPNGs).Append("\n");
            sb.Append("  FileMetaData: ").Append(FileMetaData).Append("\n");
            sb.Append("  PdfEmbeddedMetadata: ").Append(PdfEmbeddedMetadata).Append("\n");
            sb.Append("  IsSuccessful: ").Append(IsSuccessful).Append("\n");
            sb.Append("  ErrorMessage: ").Append(ErrorMessage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PDFTextExtractionResult);
        }

        /// <summary>
        /// Returns true if PDFTextExtractionResult instances are equal
        /// </summary>
        /// <param name="input">Instance of PDFTextExtractionResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PDFTextExtractionResult input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ExtractedData == input.ExtractedData ||
                    (this.ExtractedData != null &&
                    this.ExtractedData.Equals(input.ExtractedData))
                ) && 
                (
                    this.PagesAsPNGs == input.PagesAsPNGs ||
                    this.PagesAsPNGs != null &&
                    input.PagesAsPNGs != null &&
                    this.PagesAsPNGs.SequenceEqual(input.PagesAsPNGs)
                ) && 
                (
                    this.FileMetaData == input.FileMetaData ||
                    (this.FileMetaData != null &&
                    this.FileMetaData.Equals(input.FileMetaData))
                ) && 
                (
                    this.PdfEmbeddedMetadata == input.PdfEmbeddedMetadata ||
                    (this.PdfEmbeddedMetadata != null &&
                    this.PdfEmbeddedMetadata.Equals(input.PdfEmbeddedMetadata))
                ) && 
                (
                    this.IsSuccessful == input.IsSuccessful ||
                    (this.IsSuccessful != null &&
                    this.IsSuccessful.Equals(input.IsSuccessful))
                ) && 
                (
                    this.ErrorMessage == input.ErrorMessage ||
                    (this.ErrorMessage != null &&
                    this.ErrorMessage.Equals(input.ErrorMessage))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ExtractedData != null)
                    hashCode = hashCode * 59 + this.ExtractedData.GetHashCode();
                if (this.PagesAsPNGs != null)
                    hashCode = hashCode * 59 + this.PagesAsPNGs.GetHashCode();
                if (this.FileMetaData != null)
                    hashCode = hashCode * 59 + this.FileMetaData.GetHashCode();
                if (this.PdfEmbeddedMetadata != null)
                    hashCode = hashCode * 59 + this.PdfEmbeddedMetadata.GetHashCode();
                if (this.IsSuccessful != null)
                    hashCode = hashCode * 59 + this.IsSuccessful.GetHashCode();
                if (this.ErrorMessage != null)
                    hashCode = hashCode * 59 + this.ErrorMessage.GetHashCode();
                return hashCode;
            }
        }
    }
}
