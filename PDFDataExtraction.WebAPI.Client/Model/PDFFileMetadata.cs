/* 
 * PDF Data Extraction
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = PDFDataExtraction.WebAPI.Client.Client.OpenAPIDateConverter;

namespace PDFDataExtraction.WebAPI.Client.Model
{
    /// <summary>
    /// PDFFileMetadata
    /// </summary>
    [DataContract]
    public partial class PDFFileMetadata :  IEquatable<PDFFileMetadata>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PDFFileMetadata" /> class.
        /// </summary>
        /// <param name="fileMd5">fileMd5.</param>
        /// <param name="fileName">fileName.</param>
        /// <param name="textMd5">textMd5.</param>
        public PDFFileMetadata(string fileMd5 = default(string), string fileName = default(string), string textMd5 = default(string))
        {
            this.FileMd5 = fileMd5;
            this.FileName = fileName;
            this.TextMd5 = textMd5;
        }
        
        /// <summary>
        /// Gets or Sets FileMd5
        /// </summary>
        [DataMember(Name="fileMd5", EmitDefaultValue=true)]
        public string FileMd5 { get; set; }

        /// <summary>
        /// Gets or Sets FileName
        /// </summary>
        [DataMember(Name="fileName", EmitDefaultValue=true)]
        public string FileName { get; set; }

        /// <summary>
        /// Gets or Sets TextMd5
        /// </summary>
        [DataMember(Name="textMd5", EmitDefaultValue=true)]
        public string TextMd5 { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PDFFileMetadata {\n");
            sb.Append("  FileMd5: ").Append(FileMd5).Append("\n");
            sb.Append("  FileName: ").Append(FileName).Append("\n");
            sb.Append("  TextMd5: ").Append(TextMd5).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PDFFileMetadata);
        }

        /// <summary>
        /// Returns true if PDFFileMetadata instances are equal
        /// </summary>
        /// <param name="input">Instance of PDFFileMetadata to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PDFFileMetadata input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FileMd5 == input.FileMd5 ||
                    (this.FileMd5 != null &&
                    this.FileMd5.Equals(input.FileMd5))
                ) && 
                (
                    this.FileName == input.FileName ||
                    (this.FileName != null &&
                    this.FileName.Equals(input.FileName))
                ) && 
                (
                    this.TextMd5 == input.TextMd5 ||
                    (this.TextMd5 != null &&
                    this.TextMd5.Equals(input.TextMd5))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FileMd5 != null)
                    hashCode = hashCode * 59 + this.FileMd5.GetHashCode();
                if (this.FileName != null)
                    hashCode = hashCode * 59 + this.FileName.GetHashCode();
                if (this.TextMd5 != null)
                    hashCode = hashCode * 59 + this.TextMd5.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
