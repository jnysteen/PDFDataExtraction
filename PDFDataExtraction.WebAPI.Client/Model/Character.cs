/* 
 * PDF Data Extraction
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = PDFDataExtraction.WebAPI.Client.Client.SwaggerDateConverter;

namespace PDFDataExtraction.WebAPI.Client.Model
{
    /// <summary>
    /// Character
    /// </summary>
    [DataContract]
        public partial class Character :  IEquatable<Character>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Character" /> class.
        /// </summary>
        /// <param name="bbox">bbox.</param>
        /// <param name="text">text.</param>
        /// <param name="font">font.</param>
        /// <param name="word">word.</param>
        public Character(BoundingBox bbox = default(BoundingBox), string text = default(string), string font = default(string), Word word = default(Word))
        {
            this.Bbox = bbox;
            this.Text = text;
            this.Font = font;
            this.Word = word;
        }
        
        /// <summary>
        /// Gets or Sets Bbox
        /// </summary>
        [DataMember(Name="bbox", EmitDefaultValue=false)]
        public BoundingBox Bbox { get; set; }

        /// <summary>
        /// Gets or Sets Text
        /// </summary>
        [DataMember(Name="text", EmitDefaultValue=false)]
        public string Text { get; set; }

        /// <summary>
        /// Gets or Sets Font
        /// </summary>
        [DataMember(Name="font", EmitDefaultValue=false)]
        public string Font { get; set; }

        /// <summary>
        /// Gets or Sets Word
        /// </summary>
        [DataMember(Name="word", EmitDefaultValue=false)]
        public Word Word { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Character {\n");
            sb.Append("  Bbox: ").Append(Bbox).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  Font: ").Append(Font).Append("\n");
            sb.Append("  Word: ").Append(Word).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Character);
        }

        /// <summary>
        /// Returns true if Character instances are equal
        /// </summary>
        /// <param name="input">Instance of Character to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Character input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Bbox == input.Bbox ||
                    (this.Bbox != null &&
                    this.Bbox.Equals(input.Bbox))
                ) && 
                (
                    this.Text == input.Text ||
                    (this.Text != null &&
                    this.Text.Equals(input.Text))
                ) && 
                (
                    this.Font == input.Font ||
                    (this.Font != null &&
                    this.Font.Equals(input.Font))
                ) && 
                (
                    this.Word == input.Word ||
                    (this.Word != null &&
                    this.Word.Equals(input.Word))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Bbox != null)
                    hashCode = hashCode * 59 + this.Bbox.GetHashCode();
                if (this.Text != null)
                    hashCode = hashCode * 59 + this.Text.GetHashCode();
                if (this.Font != null)
                    hashCode = hashCode * 59 + this.Font.GetHashCode();
                if (this.Word != null)
                    hashCode = hashCode * 59 + this.Word.GetHashCode();
                return hashCode;
            }
        }
    }
}
