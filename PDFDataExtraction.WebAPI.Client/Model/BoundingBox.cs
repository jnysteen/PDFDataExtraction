/* 
 * PDF Data Extraction
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = PDFDataExtraction.WebAPI.Client.Client.OpenAPIDateConverter;

namespace PDFDataExtraction.WebAPI.Client.Model
{
    /// <summary>
    /// BoundingBox
    /// </summary>
    [DataContract]
    public partial class BoundingBox :  IEquatable<BoundingBox>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BoundingBox" /> class.
        /// </summary>
        /// <param name="topLeft">topLeft.</param>
        /// <param name="bottomRight">bottomRight.</param>
        public BoundingBox(Point topLeft = default(Point), Point bottomRight = default(Point))
        {
            this.TopLeft = topLeft;
            this.BottomRight = bottomRight;
        }
        
        /// <summary>
        /// Gets or Sets TopLeft
        /// </summary>
        [DataMember(Name="topLeft", EmitDefaultValue=false)]
        public Point TopLeft { get; set; }

        /// <summary>
        /// Gets or Sets BottomRight
        /// </summary>
        [DataMember(Name="bottomRight", EmitDefaultValue=false)]
        public Point BottomRight { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BoundingBox {\n");
            sb.Append("  TopLeft: ").Append(TopLeft).Append("\n");
            sb.Append("  BottomRight: ").Append(BottomRight).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BoundingBox);
        }

        /// <summary>
        /// Returns true if BoundingBox instances are equal
        /// </summary>
        /// <param name="input">Instance of BoundingBox to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BoundingBox input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TopLeft == input.TopLeft ||
                    (this.TopLeft != null &&
                    this.TopLeft.Equals(input.TopLeft))
                ) && 
                (
                    this.BottomRight == input.BottomRight ||
                    (this.BottomRight != null &&
                    this.BottomRight.Equals(input.BottomRight))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TopLeft != null)
                    hashCode = hashCode * 59 + this.TopLeft.GetHashCode();
                if (this.BottomRight != null)
                    hashCode = hashCode * 59 + this.BottomRight.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
