/* 
 * PDF Data Extraction
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using PDFDataExtraction.WebAPI.Client.Client;
using PDFDataExtraction.WebAPI.Client.Model;

namespace PDFDataExtraction.WebAPI.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPDFTextExtractionApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Extract detailed text, including text position, size and font, from a PDF
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PDFDataExtraction.WebAPI.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The PDF to extract text from</param>
        /// <param name="convertPdfToImages">Set this to &#x60;true&#x60; if the PDF should be converted to PNGs and included in the returned result. Default is &#x60;false&#x60; (optional)</param>
        /// <param name="wordLineDiff">The allowed difference in Y coordinates for words in the same line as a factor of the average character height.  The default value is 0.05 (optional)</param>
        /// <param name="whiteSpaceFactor">How wide the spacing between characters can be before the spacing is considered to be a whitespace, as a factor of the median character width.  The default value is 0.2 (optional)</param>
        /// <returns>PDFTextExtractionResult</returns>
        PDFTextExtractionResult DetailedTextExtraction (System.IO.Stream file, bool? convertPdfToImages = default(bool?), double? wordLineDiff = default(double?), double? whiteSpaceFactor = default(double?));

        /// <summary>
        /// Extract detailed text, including text position, size and font, from a PDF
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PDFDataExtraction.WebAPI.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The PDF to extract text from</param>
        /// <param name="convertPdfToImages">Set this to &#x60;true&#x60; if the PDF should be converted to PNGs and included in the returned result. Default is &#x60;false&#x60; (optional)</param>
        /// <param name="wordLineDiff">The allowed difference in Y coordinates for words in the same line as a factor of the average character height.  The default value is 0.05 (optional)</param>
        /// <param name="whiteSpaceFactor">How wide the spacing between characters can be before the spacing is considered to be a whitespace, as a factor of the median character width.  The default value is 0.2 (optional)</param>
        /// <returns>ApiResponse of PDFTextExtractionResult</returns>
        ApiResponse<PDFTextExtractionResult> DetailedTextExtractionWithHttpInfo (System.IO.Stream file, bool? convertPdfToImages = default(bool?), double? wordLineDiff = default(double?), double? whiteSpaceFactor = default(double?));
        /// <summary>
        /// Extract simple text from a PDF
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PDFDataExtraction.WebAPI.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The PDF to extract text from</param>
        /// <param name="convertPdfToImages">Set this to &#x60;true&#x60; if the PDF should be converted to PNGs and included in the returned result. Default is &#x60;false&#x60; (optional)</param>
        /// <param name="wordLineDiff">The allowed difference in Y coordinates for words in the same line as a factor of the average character height.  The default value is 0.05 (optional)</param>
        /// <param name="whiteSpaceFactor">How wide the spacing between characters can be before the spacing is considered to be a whitespace, as a factor of the median character width.  The default value is 0.2 (optional)</param>
        /// <returns>string</returns>
        string SimpleTextExtraction (System.IO.Stream file, bool? convertPdfToImages = default(bool?), double? wordLineDiff = default(double?), double? whiteSpaceFactor = default(double?));

        /// <summary>
        /// Extract simple text from a PDF
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PDFDataExtraction.WebAPI.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The PDF to extract text from</param>
        /// <param name="convertPdfToImages">Set this to &#x60;true&#x60; if the PDF should be converted to PNGs and included in the returned result. Default is &#x60;false&#x60; (optional)</param>
        /// <param name="wordLineDiff">The allowed difference in Y coordinates for words in the same line as a factor of the average character height.  The default value is 0.05 (optional)</param>
        /// <param name="whiteSpaceFactor">How wide the spacing between characters can be before the spacing is considered to be a whitespace, as a factor of the median character width.  The default value is 0.2 (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> SimpleTextExtractionWithHttpInfo (System.IO.Stream file, bool? convertPdfToImages = default(bool?), double? wordLineDiff = default(double?), double? whiteSpaceFactor = default(double?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPDFTextExtractionApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Extract detailed text, including text position, size and font, from a PDF
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PDFDataExtraction.WebAPI.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The PDF to extract text from</param>
        /// <param name="convertPdfToImages">Set this to &#x60;true&#x60; if the PDF should be converted to PNGs and included in the returned result. Default is &#x60;false&#x60; (optional)</param>
        /// <param name="wordLineDiff">The allowed difference in Y coordinates for words in the same line as a factor of the average character height.  The default value is 0.05 (optional)</param>
        /// <param name="whiteSpaceFactor">How wide the spacing between characters can be before the spacing is considered to be a whitespace, as a factor of the median character width.  The default value is 0.2 (optional)</param>
        /// <returns>Task of PDFTextExtractionResult</returns>
        System.Threading.Tasks.Task<PDFTextExtractionResult> DetailedTextExtractionAsync (System.IO.Stream file, bool? convertPdfToImages = default(bool?), double? wordLineDiff = default(double?), double? whiteSpaceFactor = default(double?));

        /// <summary>
        /// Extract detailed text, including text position, size and font, from a PDF
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PDFDataExtraction.WebAPI.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The PDF to extract text from</param>
        /// <param name="convertPdfToImages">Set this to &#x60;true&#x60; if the PDF should be converted to PNGs and included in the returned result. Default is &#x60;false&#x60; (optional)</param>
        /// <param name="wordLineDiff">The allowed difference in Y coordinates for words in the same line as a factor of the average character height.  The default value is 0.05 (optional)</param>
        /// <param name="whiteSpaceFactor">How wide the spacing between characters can be before the spacing is considered to be a whitespace, as a factor of the median character width.  The default value is 0.2 (optional)</param>
        /// <returns>Task of ApiResponse (PDFTextExtractionResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<PDFTextExtractionResult>> DetailedTextExtractionAsyncWithHttpInfo (System.IO.Stream file, bool? convertPdfToImages = default(bool?), double? wordLineDiff = default(double?), double? whiteSpaceFactor = default(double?));
        /// <summary>
        /// Extract simple text from a PDF
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PDFDataExtraction.WebAPI.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The PDF to extract text from</param>
        /// <param name="convertPdfToImages">Set this to &#x60;true&#x60; if the PDF should be converted to PNGs and included in the returned result. Default is &#x60;false&#x60; (optional)</param>
        /// <param name="wordLineDiff">The allowed difference in Y coordinates for words in the same line as a factor of the average character height.  The default value is 0.05 (optional)</param>
        /// <param name="whiteSpaceFactor">How wide the spacing between characters can be before the spacing is considered to be a whitespace, as a factor of the median character width.  The default value is 0.2 (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> SimpleTextExtractionAsync (System.IO.Stream file, bool? convertPdfToImages = default(bool?), double? wordLineDiff = default(double?), double? whiteSpaceFactor = default(double?));

        /// <summary>
        /// Extract simple text from a PDF
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PDFDataExtraction.WebAPI.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The PDF to extract text from</param>
        /// <param name="convertPdfToImages">Set this to &#x60;true&#x60; if the PDF should be converted to PNGs and included in the returned result. Default is &#x60;false&#x60; (optional)</param>
        /// <param name="wordLineDiff">The allowed difference in Y coordinates for words in the same line as a factor of the average character height.  The default value is 0.05 (optional)</param>
        /// <param name="whiteSpaceFactor">How wide the spacing between characters can be before the spacing is considered to be a whitespace, as a factor of the median character width.  The default value is 0.2 (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> SimpleTextExtractionAsyncWithHttpInfo (System.IO.Stream file, bool? convertPdfToImages = default(bool?), double? wordLineDiff = default(double?), double? whiteSpaceFactor = default(double?));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPDFTextExtractionApi : IPDFTextExtractionApiSync, IPDFTextExtractionApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PDFTextExtractionApi : IPDFTextExtractionApi
    {
        private PDFDataExtraction.WebAPI.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PDFTextExtractionApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PDFTextExtractionApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PDFTextExtractionApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PDFTextExtractionApi(String basePath)
        {
            this.Configuration = PDFDataExtraction.WebAPI.Client.Client.Configuration.MergeConfigurations(
                PDFDataExtraction.WebAPI.Client.Client.GlobalConfiguration.Instance,
                new PDFDataExtraction.WebAPI.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new PDFDataExtraction.WebAPI.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new PDFDataExtraction.WebAPI.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = PDFDataExtraction.WebAPI.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PDFTextExtractionApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PDFTextExtractionApi(PDFDataExtraction.WebAPI.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = PDFDataExtraction.WebAPI.Client.Client.Configuration.MergeConfigurations(
                PDFDataExtraction.WebAPI.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new PDFDataExtraction.WebAPI.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new PDFDataExtraction.WebAPI.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = PDFDataExtraction.WebAPI.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PDFTextExtractionApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public PDFTextExtractionApi(PDFDataExtraction.WebAPI.Client.Client.ISynchronousClient client,PDFDataExtraction.WebAPI.Client.Client.IAsynchronousClient asyncClient, PDFDataExtraction.WebAPI.Client.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = PDFDataExtraction.WebAPI.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public PDFDataExtraction.WebAPI.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public PDFDataExtraction.WebAPI.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public PDFDataExtraction.WebAPI.Client.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public PDFDataExtraction.WebAPI.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Extract detailed text, including text position, size and font, from a PDF 
        /// </summary>
        /// <exception cref="PDFDataExtraction.WebAPI.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The PDF to extract text from</param>
        /// <param name="convertPdfToImages">Set this to &#x60;true&#x60; if the PDF should be converted to PNGs and included in the returned result. Default is &#x60;false&#x60; (optional)</param>
        /// <param name="wordLineDiff">The allowed difference in Y coordinates for words in the same line as a factor of the average character height.  The default value is 0.05 (optional)</param>
        /// <param name="whiteSpaceFactor">How wide the spacing between characters can be before the spacing is considered to be a whitespace, as a factor of the median character width.  The default value is 0.2 (optional)</param>
        /// <returns>PDFTextExtractionResult</returns>
        public PDFTextExtractionResult DetailedTextExtraction (System.IO.Stream file, bool? convertPdfToImages = default(bool?), double? wordLineDiff = default(double?), double? whiteSpaceFactor = default(double?))
        {
             PDFDataExtraction.WebAPI.Client.Client.ApiResponse<PDFTextExtractionResult> localVarResponse = DetailedTextExtractionWithHttpInfo(file, convertPdfToImages, wordLineDiff, whiteSpaceFactor);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Extract detailed text, including text position, size and font, from a PDF 
        /// </summary>
        /// <exception cref="PDFDataExtraction.WebAPI.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The PDF to extract text from</param>
        /// <param name="convertPdfToImages">Set this to &#x60;true&#x60; if the PDF should be converted to PNGs and included in the returned result. Default is &#x60;false&#x60; (optional)</param>
        /// <param name="wordLineDiff">The allowed difference in Y coordinates for words in the same line as a factor of the average character height.  The default value is 0.05 (optional)</param>
        /// <param name="whiteSpaceFactor">How wide the spacing between characters can be before the spacing is considered to be a whitespace, as a factor of the median character width.  The default value is 0.2 (optional)</param>
        /// <returns>ApiResponse of PDFTextExtractionResult</returns>
        public PDFDataExtraction.WebAPI.Client.Client.ApiResponse< PDFTextExtractionResult > DetailedTextExtractionWithHttpInfo (System.IO.Stream file, bool? convertPdfToImages = default(bool?), double? wordLineDiff = default(double?), double? whiteSpaceFactor = default(double?))
        {
            // verify the required parameter 'file' is set
            if (file == null)
                throw new PDFDataExtraction.WebAPI.Client.Client.ApiException(400, "Missing required parameter 'file' when calling PDFTextExtractionApi->DetailedTextExtraction");

            PDFDataExtraction.WebAPI.Client.Client.RequestOptions localVarRequestOptions = new PDFDataExtraction.WebAPI.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = PDFDataExtraction.WebAPI.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PDFDataExtraction.WebAPI.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (convertPdfToImages != null)
            {
                localVarRequestOptions.QueryParameters.Add(PDFDataExtraction.WebAPI.Client.Client.ClientUtils.ParameterToMultiMap("", "convertPdfToImages", convertPdfToImages));
            }
            if (wordLineDiff != null)
            {
                localVarRequestOptions.QueryParameters.Add(PDFDataExtraction.WebAPI.Client.Client.ClientUtils.ParameterToMultiMap("", "wordLineDiff", wordLineDiff));
            }
            if (whiteSpaceFactor != null)
            {
                localVarRequestOptions.QueryParameters.Add(PDFDataExtraction.WebAPI.Client.Client.ClientUtils.ParameterToMultiMap("", "whiteSpaceFactor", whiteSpaceFactor));
            }
            if (file != null)
            {
                localVarRequestOptions.FileParameters.Add("file", file);
            }


            // make the HTTP request
            var localVarResponse = this.Client.Post< PDFTextExtractionResult >("/api/PDFTextExtraction/detailed", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DetailedTextExtraction", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Extract detailed text, including text position, size and font, from a PDF 
        /// </summary>
        /// <exception cref="PDFDataExtraction.WebAPI.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The PDF to extract text from</param>
        /// <param name="convertPdfToImages">Set this to &#x60;true&#x60; if the PDF should be converted to PNGs and included in the returned result. Default is &#x60;false&#x60; (optional)</param>
        /// <param name="wordLineDiff">The allowed difference in Y coordinates for words in the same line as a factor of the average character height.  The default value is 0.05 (optional)</param>
        /// <param name="whiteSpaceFactor">How wide the spacing between characters can be before the spacing is considered to be a whitespace, as a factor of the median character width.  The default value is 0.2 (optional)</param>
        /// <returns>Task of PDFTextExtractionResult</returns>
        public async System.Threading.Tasks.Task<PDFTextExtractionResult> DetailedTextExtractionAsync (System.IO.Stream file, bool? convertPdfToImages = default(bool?), double? wordLineDiff = default(double?), double? whiteSpaceFactor = default(double?))
        {
             PDFDataExtraction.WebAPI.Client.Client.ApiResponse<PDFTextExtractionResult> localVarResponse = await DetailedTextExtractionAsyncWithHttpInfo(file, convertPdfToImages, wordLineDiff, whiteSpaceFactor);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Extract detailed text, including text position, size and font, from a PDF 
        /// </summary>
        /// <exception cref="PDFDataExtraction.WebAPI.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The PDF to extract text from</param>
        /// <param name="convertPdfToImages">Set this to &#x60;true&#x60; if the PDF should be converted to PNGs and included in the returned result. Default is &#x60;false&#x60; (optional)</param>
        /// <param name="wordLineDiff">The allowed difference in Y coordinates for words in the same line as a factor of the average character height.  The default value is 0.05 (optional)</param>
        /// <param name="whiteSpaceFactor">How wide the spacing between characters can be before the spacing is considered to be a whitespace, as a factor of the median character width.  The default value is 0.2 (optional)</param>
        /// <returns>Task of ApiResponse (PDFTextExtractionResult)</returns>
        public async System.Threading.Tasks.Task<PDFDataExtraction.WebAPI.Client.Client.ApiResponse<PDFTextExtractionResult>> DetailedTextExtractionAsyncWithHttpInfo (System.IO.Stream file, bool? convertPdfToImages = default(bool?), double? wordLineDiff = default(double?), double? whiteSpaceFactor = default(double?))
        {
            // verify the required parameter 'file' is set
            if (file == null)
                throw new PDFDataExtraction.WebAPI.Client.Client.ApiException(400, "Missing required parameter 'file' when calling PDFTextExtractionApi->DetailedTextExtraction");


            PDFDataExtraction.WebAPI.Client.Client.RequestOptions localVarRequestOptions = new PDFDataExtraction.WebAPI.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (convertPdfToImages != null)
            {
                localVarRequestOptions.QueryParameters.Add(PDFDataExtraction.WebAPI.Client.Client.ClientUtils.ParameterToMultiMap("", "convertPdfToImages", convertPdfToImages));
            }
            if (wordLineDiff != null)
            {
                localVarRequestOptions.QueryParameters.Add(PDFDataExtraction.WebAPI.Client.Client.ClientUtils.ParameterToMultiMap("", "wordLineDiff", wordLineDiff));
            }
            if (whiteSpaceFactor != null)
            {
                localVarRequestOptions.QueryParameters.Add(PDFDataExtraction.WebAPI.Client.Client.ClientUtils.ParameterToMultiMap("", "whiteSpaceFactor", whiteSpaceFactor));
            }
            if (file != null)
            {
                localVarRequestOptions.FileParameters.Add("file", file);
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<PDFTextExtractionResult>("/api/PDFTextExtraction/detailed", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DetailedTextExtraction", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Extract simple text from a PDF 
        /// </summary>
        /// <exception cref="PDFDataExtraction.WebAPI.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The PDF to extract text from</param>
        /// <param name="convertPdfToImages">Set this to &#x60;true&#x60; if the PDF should be converted to PNGs and included in the returned result. Default is &#x60;false&#x60; (optional)</param>
        /// <param name="wordLineDiff">The allowed difference in Y coordinates for words in the same line as a factor of the average character height.  The default value is 0.05 (optional)</param>
        /// <param name="whiteSpaceFactor">How wide the spacing between characters can be before the spacing is considered to be a whitespace, as a factor of the median character width.  The default value is 0.2 (optional)</param>
        /// <returns>string</returns>
        public string SimpleTextExtraction (System.IO.Stream file, bool? convertPdfToImages = default(bool?), double? wordLineDiff = default(double?), double? whiteSpaceFactor = default(double?))
        {
             PDFDataExtraction.WebAPI.Client.Client.ApiResponse<string> localVarResponse = SimpleTextExtractionWithHttpInfo(file, convertPdfToImages, wordLineDiff, whiteSpaceFactor);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Extract simple text from a PDF 
        /// </summary>
        /// <exception cref="PDFDataExtraction.WebAPI.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The PDF to extract text from</param>
        /// <param name="convertPdfToImages">Set this to &#x60;true&#x60; if the PDF should be converted to PNGs and included in the returned result. Default is &#x60;false&#x60; (optional)</param>
        /// <param name="wordLineDiff">The allowed difference in Y coordinates for words in the same line as a factor of the average character height.  The default value is 0.05 (optional)</param>
        /// <param name="whiteSpaceFactor">How wide the spacing between characters can be before the spacing is considered to be a whitespace, as a factor of the median character width.  The default value is 0.2 (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public PDFDataExtraction.WebAPI.Client.Client.ApiResponse< string > SimpleTextExtractionWithHttpInfo (System.IO.Stream file, bool? convertPdfToImages = default(bool?), double? wordLineDiff = default(double?), double? whiteSpaceFactor = default(double?))
        {
            // verify the required parameter 'file' is set
            if (file == null)
                throw new PDFDataExtraction.WebAPI.Client.Client.ApiException(400, "Missing required parameter 'file' when calling PDFTextExtractionApi->SimpleTextExtraction");

            PDFDataExtraction.WebAPI.Client.Client.RequestOptions localVarRequestOptions = new PDFDataExtraction.WebAPI.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain"
            };

            var localVarContentType = PDFDataExtraction.WebAPI.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PDFDataExtraction.WebAPI.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (convertPdfToImages != null)
            {
                localVarRequestOptions.QueryParameters.Add(PDFDataExtraction.WebAPI.Client.Client.ClientUtils.ParameterToMultiMap("", "convertPdfToImages", convertPdfToImages));
            }
            if (wordLineDiff != null)
            {
                localVarRequestOptions.QueryParameters.Add(PDFDataExtraction.WebAPI.Client.Client.ClientUtils.ParameterToMultiMap("", "wordLineDiff", wordLineDiff));
            }
            if (whiteSpaceFactor != null)
            {
                localVarRequestOptions.QueryParameters.Add(PDFDataExtraction.WebAPI.Client.Client.ClientUtils.ParameterToMultiMap("", "whiteSpaceFactor", whiteSpaceFactor));
            }
            if (file != null)
            {
                localVarRequestOptions.FileParameters.Add("file", file);
            }


            // make the HTTP request
            var localVarResponse = this.Client.Post< string >("/api/PDFTextExtraction/simple", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SimpleTextExtraction", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Extract simple text from a PDF 
        /// </summary>
        /// <exception cref="PDFDataExtraction.WebAPI.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The PDF to extract text from</param>
        /// <param name="convertPdfToImages">Set this to &#x60;true&#x60; if the PDF should be converted to PNGs and included in the returned result. Default is &#x60;false&#x60; (optional)</param>
        /// <param name="wordLineDiff">The allowed difference in Y coordinates for words in the same line as a factor of the average character height.  The default value is 0.05 (optional)</param>
        /// <param name="whiteSpaceFactor">How wide the spacing between characters can be before the spacing is considered to be a whitespace, as a factor of the median character width.  The default value is 0.2 (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> SimpleTextExtractionAsync (System.IO.Stream file, bool? convertPdfToImages = default(bool?), double? wordLineDiff = default(double?), double? whiteSpaceFactor = default(double?))
        {
             PDFDataExtraction.WebAPI.Client.Client.ApiResponse<string> localVarResponse = await SimpleTextExtractionAsyncWithHttpInfo(file, convertPdfToImages, wordLineDiff, whiteSpaceFactor);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Extract simple text from a PDF 
        /// </summary>
        /// <exception cref="PDFDataExtraction.WebAPI.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The PDF to extract text from</param>
        /// <param name="convertPdfToImages">Set this to &#x60;true&#x60; if the PDF should be converted to PNGs and included in the returned result. Default is &#x60;false&#x60; (optional)</param>
        /// <param name="wordLineDiff">The allowed difference in Y coordinates for words in the same line as a factor of the average character height.  The default value is 0.05 (optional)</param>
        /// <param name="whiteSpaceFactor">How wide the spacing between characters can be before the spacing is considered to be a whitespace, as a factor of the median character width.  The default value is 0.2 (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<PDFDataExtraction.WebAPI.Client.Client.ApiResponse<string>> SimpleTextExtractionAsyncWithHttpInfo (System.IO.Stream file, bool? convertPdfToImages = default(bool?), double? wordLineDiff = default(double?), double? whiteSpaceFactor = default(double?))
        {
            // verify the required parameter 'file' is set
            if (file == null)
                throw new PDFDataExtraction.WebAPI.Client.Client.ApiException(400, "Missing required parameter 'file' when calling PDFTextExtractionApi->SimpleTextExtraction");


            PDFDataExtraction.WebAPI.Client.Client.RequestOptions localVarRequestOptions = new PDFDataExtraction.WebAPI.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (convertPdfToImages != null)
            {
                localVarRequestOptions.QueryParameters.Add(PDFDataExtraction.WebAPI.Client.Client.ClientUtils.ParameterToMultiMap("", "convertPdfToImages", convertPdfToImages));
            }
            if (wordLineDiff != null)
            {
                localVarRequestOptions.QueryParameters.Add(PDFDataExtraction.WebAPI.Client.Client.ClientUtils.ParameterToMultiMap("", "wordLineDiff", wordLineDiff));
            }
            if (whiteSpaceFactor != null)
            {
                localVarRequestOptions.QueryParameters.Add(PDFDataExtraction.WebAPI.Client.Client.ClientUtils.ParameterToMultiMap("", "whiteSpaceFactor", whiteSpaceFactor));
            }
            if (file != null)
            {
                localVarRequestOptions.FileParameters.Add("file", file);
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<string>("/api/PDFTextExtraction/simple", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SimpleTextExtraction", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
